name: Steampipe Release
on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
jobs:
  goreleaser:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Unshallow
        run: git fetch

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14

      - name: Hook private repo
        run: git config --global url."https://${{ secrets.GH_ACCESS_TOKEN }}:x-oauth-basic@github.com".insteadOf "https://github.com"

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: release --rm-dist --skip-publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Move build artifacts
        run: |
          mkdir ~/artifacts
          mv $GITHUB_WORKSPACE/dist/steampipe_linux_amd64.zip ~/artifacts/linux.zip
          mv $GITHUB_WORKSPACE/dist/steampipe_darwin_amd64.zip ~/artifacts/darwin.zip

      - name: Zip up Acceptance Test Suite
        run: |
          mv $GITHUB_WORKSPACE/tests ~/tests
          cd ~/tests
          zip -r ~/artifacts/tests.zip .
          cd -

      - name: List Build Artifacts
        run: ls -l ~/artifacts

      - name: Save Linux Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-linux
          path: ~/artifacts/linux.zip
          if-no-files-found: error

      - name: Save MacOS Build Artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact-darwin
          path: ~/artifacts/darwin.zip
          if-no-files-found: error

      - name: Save Acceptance Test Suite
        uses: actions/upload-artifact@v2
        with:
          name: test-artifact
          path: ~/artifacts/tests.zip
          if-no-files-found: error

  build_steampipe:
    name: Build Steampipe
    needs: goreleaser
    strategy:
      matrix:
        platform: [ macos-latest ]

    runs-on: ${{ matrix.platform }}
    env:
      GOFLAGS: "-mod=vendor"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set Git to use Linux-style line endings
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Check out Steampipe
        uses: actions/checkout@main
        with:
          repository: turbot/steampipe
          token: ${{ secrets.GH_ACCESS_TOKEN }}
          ref: main

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.14

      - name: Checkout
        uses: actions/checkout@v2

      - name: Prepare for downloads
        id: prepare-for-downloads
        run: |
          mkdir ~/artifacts

      - name: Download Linux Build Artifacts
        uses: actions/download-artifact@v2
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        with:
          name: build-artifact-linux
          path: ~/artifacts

      - name: Download Darwin Build Artifacts
        uses: actions/download-artifact@v2
        if: ${{ matrix.platform == 'macos-latest' }}
        with:
          name: build-artifact-darwin
          path: ~/artifacts

  acceptance_testing:
    name: Acceptance testing
    needs: goreleaser
    strategy:
      matrix:
        platform: [ macos-latest ]
      runs-on: ${{ matrix.platform }}
      steps:
        - name: Set up Go
          uses: actions/setup-go@v2
          with:
            go-version: 1.14
        # if we don't do this, Git will convert all line endings to CRLF when cloning on windows
        - name: Prepare for downloads
          id: prepare-for-downloads
          run: |
            mkdir ~/artifacts

        - name: Download Darwin Build Artifacts
          uses: actions/download-artifact@v2
          if: ${{ matrix.platform == 'macos-latest' }}
          with:
            name: build-artifact-darwin
            path: ~/artifacts

        - name: Download Acceptance Test Suite
          uses: actions/download-artifact@v2
          with:
            name: test-artifact
            path: ~/artifacts

        - name: Check that everything got downloaded
          run: |
            ls -l ~/artifacts

        - name: Rename build artifact on Darwin
          if: ${{ matrix.platform == 'macos-latest' }}
          run: mv ~/artifacts/darwin.zip ~/artifacts/build.zip

        - name: Check that renaming is good
          run: |
            ls -l ~/artifacts

        - name: Extract Artifacts and Install Binary
          if: ${{ matrix.platform == 'macos-latest' }}
          run: |
            mkdir ~/build
            mkdir ~/tests
            unzip ~/artifacts/build.zip -d ~/build
            ls -l ~/build
            unzip ~/artifacts/tests.zip -d ~/tests
            ls -l ~/tests
            echo "PATH=$PATH:$HOME/build:$HOME/tests/acceptance/lib/bats/libexec" >> $GITHUB_ENV
            cd ~/tests

        - name: Run Test Suite
          run: |
            chmod +x $HOME/tests/run_acceptance.sh
            $HOME/tests/run_acceptance.sh

#  create_release:
#    name: Release
#    needs: [goreleaser, platform_test]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Unshallow
#        run: git fetch --prune --unshallow
#
#      - name: Set up Go
#        uses: actions/setup-go@v2
#        with:
#          go-version: 1.14
#
#      - name: Hook private repo
#        run: git config --global url."https://${{ secrets.GH_ACCESS_TOKEN }}:x-oauth-basic@github.com".insteadOf "https://github.com"
#
#      - name: Run GoReleaser
#        uses: goreleaser/goreleaser-action@v2
#        with:
#          version: latest
#          args: release --rm-dist
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  clean_up:
    # let's clean up the artifacts.
    # incase this step isn't reached,
    # artifacts automatically expire after 90 days anyway
    # refer:
    #   https://docs.github.com/en/actions/configuring-and-managing-workflows/persisting-workflow-data-using-artifacts#downloading-and-deleting-artifacts-after-a-workflow-run-is-complete
    name: Clean Up Artifacts
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Clean up Windows Build
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-artifact-windows
          failOnError: true

      - name: Clean up Linux Build
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-artifact-linux
          failOnError: true

      - name: Clean up Darwin Build
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-artifact-darwin
          failOnError: true

      - name: Clean up Test Suite
        uses: geekyeggo/delete-artifact@v1
        with:
          name: test-artifact
          failOnError: true
